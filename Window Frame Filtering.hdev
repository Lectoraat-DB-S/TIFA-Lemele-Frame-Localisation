<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="23.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>* Program to call for capturing colour point clouds, converting to .ply and saving them properly for Azure Kinect</c>
<c>* Program to analyse data from Azure Kinect</c>
<c>* Johan van Voskuilen, 20231012</c>
<c>* Jeroen Poetsma, 20231013</c>
<c></c>
<c>* Sources</c>
<c>* Color point cloud generation (.pts): https://github.com/widVE/KinectCloud</c>
<c>* Converting point cloud (.pts) to .ply: https://www.cloudcompare.org/</c>
<c></c>
<c>* Because this application may use multiple cameras in the future,</c>
<c>* device IDs, their files and their 3D models can be labeled.</c>
<c>* Any model and file belonging to the Centre camera is labeled C or with that camera's ID</c>
<c></c>
<c>* _________________________________________________________________________</c>
<c></c>
<c>* Variables</c>
<c>* Device IDs</c>
<l>IDC := '000237925112'</l>
<l>IDR := 'NA'</l>
<l>IDL := 'NA'</l>
<c></c>
<c>* Set display resolution</c>
<l>Width := 1280</l>
<l>Height := 720</l>
<c></c>
<c>* Configure camera params</c>
<c>* Color exposure [-ce] (time in nanoseconds)</c>
<l>Exposure := ' -ce 60000'</l>
<c></c>
<c>* White balance [-cw] in Kelvin (steps of 10)</c>
<l>WhiteBalance := ' -cw 3600'</l>
<c></c>
<c>* Declare device topology [-dt] (Standalone [a], Master [m], Slave [s])</c>
<l>Topology := ' -dt ' + IDC + ' a'</l>
<c></c>
<c>* Declare color resolution [-dra {res}] for all, [-dr ser {res}] for target (res: 720p, 1080p, 1440p, 1536p, 2160p, 3072p)</c>
<l>Resolution := ' -dra 1080p'</l>
<c></c>
<c>* Declare depth mode [-dma {mode}] for all, [dm ser {mode}] for target (mode: NFOV_2X2BINNED, NFOV_UNBINNED, WFOV_2X2BINNED, WFOV_UNBINNED)</c>
<l>DepthMode := ' -dma NFOV_UNBINNED'</l>
<c></c>
<c>* Set file path and name [-o] (prefix [-o] and suffix {%s.pts} in system_call) (%s = camera serial number, %f = frame number)</c>
<l>Path := 'C:/Users/jeroe/Desktop/TestTranslatie_'</l>
<c></c>
<c>* Set KinectCloud directory</c>
<l>PathKinectCloud := 'C:/Users/jeroe/source/repos/KinectCloud/x64/Debug'</l>
<c></c>
<c>* Set CloudCompare directory</c>
<l>PathCloudCompare := 'C:/Program Files/CloudCompare'</l>
<c></c>
<c>* Path to save output parameters to</c>
<l>SaveTxt := 'C:/Users/jeroe/Desktop/TestTranslatie.txt'</l>
<c></c>
<c>* Selection box coarse filters (in meters)</c>
<l>Xmin := -0.7</l>
<l>Xmax := 0.6</l>
<l>Ymin := -0.6</l>
<l>Ymax := 1.1</l>
<l>Zmin := 1.55</l>
<l>Zmax := 1.95</l>
<c></c>
<c>* Pose translation (camera to robot/cobot) (in meters/degrees)</c>
<l>TransX := -0.1385739</l>
<l>TransY := 0.77807</l>
<l>TransZ := 0.380945</l>
<l>RotX := -90</l>
<l>RotY := 0</l>
<l>RotZ := 180</l>
<c></c>
<c>* _________________________________________________________________________</c>
<c></c>
<c>* Start program timer</c>
<l>count_seconds(StartTimer)</l>
<c></c>
<c>* Take point cloud snapshot using KinectCloud (.pts file) (-s for snapshot, -da to apply params to all devices)</c>
<l>set_current_dir (PathKinectCloud)</l>
<l>system_call ('KinectCloud.exe -s -da' + Exposure + WhiteBalance + Topology + Resolution + DepthMode + ' -o ' + Path + '%s.pts')</l>
<c></c>
<c>* Load point clouds in CloudCompare and export as .ply</c>
<l>set_current_dir (PathCloudCompare)</l>
<l>system_call ('CloudCompare.exe -SILENT -O ' + Path + IDC + '.pts' + ' -NO_TIMESTAMP -C_EXPORT_FMT PLY -SAVE_CLOUDS FILE "' + Path + IDC + '.ply"')</l>
<c></c>
<c>* End grabbing timer</c>
<l>count_seconds(EndGrab)</l>
<l>RunTimeGrab := EndGrab - StartTimer</l>
<c></c>
<c>* _________________________________________________________________________</c>
<c></c>
<c>* Start filtering timer</c>
<l>count_seconds(StartFilter)</l>
<c></c>
<c>* Read-in data (Centre)</c>
<l>read_object_model_3d (Path + IDC + '.ply', 'mm', [], [], PointCloudC, Status)</l>
<c></c>
<c>* Threshold data (Centre)</c>
<l>dev_open_window (0, 0, Width, Height, 'black', Window3D)</l>
<l>set_display_font (Window3D, 28, 'mono', 'true', 'false')</l>
<l>create_pose (0.0, 0.0, 40.0, 30, 30, 0, 'Rp+T', 'gba', 'point', VisPose)</l>
<l>gen_cam_par_area_scan_division (0.025, 0, 5.2e-06, 5.2e-06, Width / 4.0, Height / 4.0, Width / 2.0, Height / 2.0, CameraParam)</l>
<l>Instructions := ['Rotate: Left button','Zoom: Shift + left button','Move: Ctrl + left button']</l>
<l>visualize_object_model_3d (Window3D, PointCloudC, CameraParam, VisPose, ['disp_pose', 'red_channel_attrib','green_channel_attrib','blue_channel_attrib'], ['true', 'red','green','blue'], 'Captured point cloud', [], Instructions, PoseOut)</l>
<c></c>
<l>select_points_object_model_3d (PointCloudC, 'point_coord_x', Xmin, Xmax, PointCloudCThresholded)</l>
<l>visualize_object_model_3d (Window3D, PointCloudCThresholded, CameraParam, VisPose, ['disp_pose', 'red_channel_attrib','green_channel_attrib','blue_channel_attrib'], ['true', 'red','green','blue'], 'Thresholding X axis', [], Instructions, PoseOut)</l>
<c></c>
<l>select_points_object_model_3d (PointCloudCThresholded, 'point_coord_y', Ymin, Ymax, PointCloudCThresholded)</l>
<l>visualize_object_model_3d (Window3D, PointCloudCThresholded, CameraParam, VisPose, ['disp_pose', 'red_channel_attrib','green_channel_attrib','blue_channel_attrib'], ['true', 'red','green','blue'], 'Thresholding Y axis', [], Instructions, PoseOut)</l>
<c></c>
<l>select_points_object_model_3d (PointCloudCThresholded, 'point_coord_z', Zmin, Zmax, PointCloudCThresholded)</l>
<l>visualize_object_model_3d (Window3D, PointCloudCThresholded, CameraParam, VisPose, ['disp_pose', 'red_channel_attrib','green_channel_attrib','blue_channel_attrib'], ['true', 'red','green','blue'], 'Thresholding Z axis', [], Instructions, PoseOut)</l>
<c></c>
<c>* Filter out noise (Centre)</c>
<l>get_object_model_3d_params (PointCloudCThresholded, 'num_points', NumPoints)</l>
<l>NumNeighbors := 15</l>
<l>InlierRate := 99</l>
<l>get_object_model_3d_params (PointCloudCThresholded, 'neighbor_distance ' + NumNeighbors, DistanceDistribution)</l>
<l>Distance := sort(DistanceDistribution)[|DistanceDistribution| * InlierRate / 100]</l>
<l>select_points_object_model_3d (PointCloudCThresholded, 'num_neighbors ' + Distance, 15, NumPoints, PointCloudCThresholdedFiltered)</l>
<l>visualize_object_model_3d (Window3D, PointCloudCThresholdedFiltered, CameraParam, VisPose, ['disp_pose', 'red_channel_attrib','green_channel_attrib','blue_channel_attrib'], ['true', 'red','green','blue'], 'Filtering out small groups of points', [], Instructions, PoseOut)</l>
<c></c>
<c>* _________________________________________________________________________</c>
<c></c>
<c>* Get bounding box and pose</c>
<l>smallest_bounding_box_object_model_3d (PointCloudCThresholdedFiltered, 'oriented', BoundingBoxPose, LengthX, LengthY, LengthZ)</l>
<l>gen_box_object_model_3d (BoundingBoxPose, LengthX, LengthY, LengthZ, BoundingBox)</l>
<l>visualize_object_model_3d (Window3D, BoundingBox, CameraParam, VisPose, ['alpha', 'disp_pose'], [0.5,'true'], 'Bounding box of window frame', [], Instructions, PoseOut)</l>
<c></c>
<c>* Translate pose as seen from camera to pose as seen from origin robot/cobot</c>
<l>create_pose (0, 0, 0, RotX, RotY, RotZ, 'Rp+T', 'abg', 'point', PoseRot)</l>
<l>rigid_trans_object_model_3d (BoundingBox, PoseRot, BoundingBoxTrans)</l>
<l>get_object_model_3d_params (BoundingBoxTrans, 'primitive_pose', BoundingBoxTransPose)</l>
<l>BoundingBoxTransPose[0] := BoundingBoxTransPose[0] + TransX</l>
<l>BoundingBoxTransPose[1] := BoundingBoxTransPose[1] + TransY</l>
<l>BoundingBoxTransPose[2] := BoundingBoxTransPose[2] + TransZ</l>
<c></c>
<l>gen_box_object_model_3d (BoundingBoxTransPose, LengthX, LengthY, LengthZ, BoundingBoxTransPoseDisp)</l>
<l>create_pose (0.0, 0.0, 50.0, RotX - 180 + 30, RotY, RotZ - 30, 'Rp+T', 'gba', 'point', VisPoseTrans)</l>
<l>visualize_object_model_3d (Window3D, BoundingBoxTransPoseDisp, CameraParam, VisPoseTrans, ['alpha', 'disp_pose'], [0.5,'true'], 'Bounding box translated to cobot origin', [], Instructions, PoseOut)</l>
<c></c>
<c>* End program timer</c>
<l>count_seconds(EndFilter)</l>
<l>RunTime := EndFilter - StartFilter</l>
<c></c>
<c>* _________________________________________________________________________</c>
<c></c>
<c>* Write output data to file</c>
<l>open_file (SaveTxt, 'output', FileHandle)</l>
<l>fwrite_string (FileHandle, \
           'The detected measurements (BoundingBox) are as follows:' + '\n' + '\n'\
           'Measured X axis (width in m):' + '\n' + LengthX + '\n' + '\n'\
           'Measured Y axis (height in m):' + '\n' + LengthY + '\n' + '\n'\
           'Measured Z axis (depth in m, inaccurate):' + '\n' + LengthZ + '\n' + '\n'\
           '\n' + 'The detected translated pose values (BoundingBoxTransPose) are as follows:' + '\n' + '\n'\
           'Transformation on the x axis (in mm):' + '\n' + BoundingBoxTransPose[0] * 1000 + '\n' + '\n'\
           'Transformation on the y axis (in mm):' + '\n' + BoundingBoxTransPose[1] * 1000 + '\n' + '\n'\
           'Transformation on the z axis (in mm):' + '\n' + BoundingBoxTransPose[2] * 1000 + '\n' + '\n'\
           'Rotation around the x axis (in degrees) (-270/+90):' + '\n' + BoundingBoxTransPose[3] + '\n' + '\n'\
           'Rotation around the y axis (in degrees) (+270/-90):' + '\n' + BoundingBoxTransPose[5] + '\n' + '\n'\
           'Rotation around the z axis (in degrees) (-180/+180):' + '\n' + [BoundingBoxTransPose[4] - 180] + '\n' + '\n')</l>
<l>close_file (FileHandle)</l>
<c></c>
<c>* Display output data written to file</c>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandleText)</l>
<l>disp_text (WindowHandleText, \
           'The detected measurements (BoundingBox) are as follows:' + '\n' + '\n'\
           'Measured X axis (width in m):' + '\n' + LengthX + '\n' + '\n'\
           'Measured Y axis (height in m):' + '\n' + LengthY + '\n' + '\n'\
           'Measured Z axis (depth in m, inaccurate):' + '\n' + LengthZ + '\n' + '\n'\
           '\n' + 'The detected translated pose values (BoundingBoxTransPose) are as follows:' + '\n' + '\n'\
           'Transformation on the x axis (in mm):' + '\n' + BoundingBoxTransPose[0] * 1000 + '\n' + '\n'\
           'Transformation on the y axis (in mm):' + '\n' + BoundingBoxTransPose[1] * 1000 + '\n' + '\n'\
           'Transformation on the z axis (in mm):' + '\n' + BoundingBoxTransPose[2] * 1000 + '\n' + '\n'\
           'Rotation around the x axis (in degrees) (-270/+90):' + '\n' + BoundingBoxTransPose[3] + '\n' + '\n'\
           'Rotation around the y axis (in degrees) (+270/-90):' + '\n' + BoundingBoxTransPose[5] + '\n' + '\n'\
           'Rotation around the z axis (in degrees) (-180/+180):' + '\n' + [BoundingBoxTransPose[4] - 180] + '\n' + '\n'\
           , 'window', 12, 12, 'black', [], [])</l>
<c></c>
<c>* End total timer</c>
<l>count_seconds(EndTotal)</l>
<l>RunTimeGrab := EndTotal - StartTimer</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
